"""
Django settings for Recruit_AI project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# settings.py




# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

load_dotenv()

SECRET_KEY = os.getenv('SECRET_KEY')
BASE_IP = os.getenv('BASE_IP')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# ALLOWED_HOSTS = []
ALLOWED_HOSTS = ['localhost', BASE_IP]


# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'job',
    'rest_framework',
    'corsheaders',
    'rest_framework_simplejwt',
    'question',
    'candidates',
    'aspect',
    'django_celery_results',
    'storages'
]

# LOGIN_URL = 'login'  # URL where requests are redirected for login
# LOGIN_REDIRECT_URL = 'dashboard'  # URL to redirect after successful login
# LOGOUT_REDIRECT_URL = 'login'  # URL to redirect after logout

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
}


ROOT_URLCONF = 'Recruit_AI.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


ASGI_APPLICATION = 'Recruit_AI.asgi.application'
WSGI_APPLICATION = 'Recruit_AI.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

###############################################################################################################
"""
this is the db sqlite implementation use this
"""
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

#################################################################################################################
"""
This is the postgresql implementation
I am commenting this out and then pushing my code
It will be better if you guys use db sqlite in normal working
 """
# DATABASES = {

#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         # 'NAME': 'recruitaihasaan',
#         'NAME': 'recruitaidb',
#         'USER' : 'postgres',
#         'PASSWORD' : 'Hasaan123',
#         'HOST' : 'localhost'

#     }
# }

load_dotenv()  # Load environment variables from .env file

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': '5432',
        
        
    }
} 
#################################################################################################################

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'


TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True



CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://localhost:5174",
    f"http://{BASE_IP}:5173",
    "http://localhost:5175",  # Vite development server
]

# if you want to allow cookies / Authorization header:
CORS_ALLOW_CREDENTIALS = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Enable WhiteNoise compressed + versioned storage
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Add these settings for media files
# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Add this to handle file uploads
FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]


#######################################################################################################################################################################################################

from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60), #defines how long the access token remains valid before expiring
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1), # defines how long the refresh token remains valid before expiring
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,
}


"""
'ROTATE_REFRESH_TOKENS': False,
When False: The same refresh token can be used repeatedly until it expires (here - after 1 day).
When True: Every time the user refreshes the access token, a new refresh token is issued, and the old one is blacklisted (if BLACKLIST_AFTER_ROTATION is True)
"""

"""
'BLACKLIST_AFTER_ROTATION': True,
This only applies when ROTATE_REFRESH_TOKENS = True.
When True: The old refresh token is blacklisted when a new one is issued.
When False: The old refresh token can still be used until it expires.
Since here we are not rotating refresh tokens, this setting has no effect in your current configuration.
"""

"""
'UPDATE_LAST_LOGIN': False,
When True: The last_login field in the User model is updated every time a user logs in using a refresh token.
When False: The last_login field is only updated on actual login, not when refreshing tokens.
here -  The last_login field will only update when users log in manually, not when they refresh their access tokens.
"""


""" 
We do not need these above three settings as we have set them to False which their state by default, but I have kept them if at all they are needed for future use
"""


#######################################################################################################################################################################################################

GOOGLE_CLIENT_ID = os.environ.get('GOOGLE_CLIENT_ID')

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field


# load_dotenv()  # Load environment variables from .env file




DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



"""
to run django development server run : python manage.py runserver
to run asgi powered dapne server run : daphne -b 127.0.0.1 -p 8000 Recruit_AI.asgi:application
to run celery: celery -A Recruit_AI worker --pool=solo -l info
or celery -A Recruit_AI worker --pool=threads -l info
in linux: celery -A Recruit_AI worker --pool=prefork -l info ,or simply,  celery -A Recruit_AI worker -l info    ,Note: by default celery uses --pool=prefork

"""




EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')  # Use App Password, NOT your Gmail password



# CELERY SETTINGS

# CELERY_BROKER_URL = 'redis://127.0.0.1:6379'
# CELERY_ACCEPT_CONTENT = ['application/json']
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_TIMEZONE = 'Asia/Kolkata'

# CELERY_RESULT_BACKEND = 'django-db'



# S3 bucket credentials
AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
AWS_S3_SIGNATURE_NAME = 's3v4'
AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME')
AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL =  None
AWS_S3_VERITY = True
DEFAULT_FILE_STORAGE='storages.backends.s3boto3.S3Boto3Storage'  



# # Media files in S3
MEDIA_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com/'
MEDIA_ROOT = ''  # Not needed with S3

